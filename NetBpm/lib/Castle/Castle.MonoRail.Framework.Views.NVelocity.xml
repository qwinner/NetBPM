<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.MonoRail.Framework.Views.NVelocity</name>
    </assembly>
    <members>
        <member name="T:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.AbstractComponentDirective">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.AbstractComponentDirective.ProcessFirstParam(NVelocity.Runtime.Parser.Node.INode,NVelocity.Context.IInternalContextAdapter,System.Int32)">
            <summary>
            Processes the first param.
            first param can either be the literal string 'with' which means the user
            is using the syntax #blockcomponent(ComponentName with "param1=value1" "param2=value2")
            or it could be a dictionary string like: 
            #blockcomponent(ComponentName "#{ param1='value1', param2='value2' }")
            anything different than that will throw an exception
            </summary>
            <param name="node">The node.</param>
            <param name="context">The context.</param>
            <param name="childrenCount">The children count.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.BlockComponentDirective">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.CaptureForDirective.#ctor">
            <summary>
            Render's the contents of the directive and store them in the context
            variable so it can be referenced later on the template
            
            #capturefor(someId)
            	Some content goes here
            #end
            
            $someId
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.ComponentDirective">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.SubSectionDirective.Init(NVelocity.Runtime.IRuntimeServices,NVelocity.Context.IInternalContextAdapter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>
            How this directive is to be initialized.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.SubSectionDirective.Render(NVelocity.Context.IInternalContextAdapter,System.IO.TextWriter,NVelocity.Runtime.Parser.Node.INode)">
            <summary>
            How this directive is to be rendered
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.SubSectionDirective.Name">
            <summary>
            Return the name of this directive
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.NVelocity.CustomDirectives.SubSectionDirective.Type">
            <summary>
            Get the directive type BLOCK/LINE
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.CustomTemplate.Process">
            <summary>
            gets the named resource as a stream, parses and inits
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine.#ctor">
            <summary>
            Creates a new <see cref="T:Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine"/> instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName to obtain the correct template
            and writes the results to the System.TextWriter. No layout is applied!
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine.InitializeVelocityProperties(Commons.Collections.ExtendedProperties)">
            <summary>
            Initializes basic velocity properties. The main purpose of this method is to
            allow this logic to be overrided.
            </summary>
            <param name="props">The <see cref="T:Commons.Collections.ExtendedProperties"/> collection to populate.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine.ResolveTemplateName(System.String)">
            <summary>
            Resolves the template name into a velocity template file name.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.NVelocity.NVelocityViewEngine.ResolveTemplateName(System.String,System.String)">
            <summary>
            Resolves the template name into a velocity template file name.
            </summary>
        </member>
    </members>
</doc>
